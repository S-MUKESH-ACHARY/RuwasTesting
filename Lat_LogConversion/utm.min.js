var K0 = .9996, E = .00669438, E2 = Math.pow(E, 2), E3 = Math.pow(E, 3), E_P2 = E / (1 - E), SQRT_E = Math.sqrt(1 - E), _E = (1 - SQRT_E) / (1 + SQRT_E), _E2 = Math.pow(_E, 2), _E3 = Math.pow(_E, 3), _E4 = Math.pow(_E, 4), _E5 = Math.pow(_E, 5), M1 = 1 - E / 4 - 3 * E2 / 64 - 5 * E3 / 256, M2 = 3 * E / 8 + 3 * E2 / 32 + 45 * E3 / 1024, M3 = 15 * E2 / 256 + 45 * E3 / 1024, M4 = 35 * E3 / 3072, P2 = 1.5 * _E - 27 / 32 * _E3 + 269 / 512 * _E5, P3 = 21 / 16 * _E2 - 55 / 32 * _E4, P4 = 151 / 96 * _E3 - 417 / 128 * _E5, P5 = 1097 / 512 * _E4, R = 6378137, ZONE_LETTERS = "CDEFGHJKLMNPQRSTUVWXX"; function toLatLon(e, o, t, n, $, r) { if (r = void 0 === r || r, n || void 0 !== $) { if (n && void 0 !== $) throw Error("set either zoneLetter or northern, but not both") } else throw Error("either zoneLetter or northern needs to be set"); if (r) { if (e < 1e5 || 1e6 <= e) throw RangeError("easting out of range (must be between 100 000 m and 999 999 m)"); if (o < 0 || o > 1e7) throw RangeError("northing out of range (must be between 0 m and 10 000 000 m)") } if (t < 1 || t > 60) throw RangeError("zone number out of range (must be between 1 and 60)"); if (n) { if (1 !== (n = n.toUpperCase()).length || -1 === ZONE_LETTERS.indexOf(n)) throw RangeError("zone letter out of range (must be between C and X)"); $ = n >= "N" } var _ = o; $ || (_ -= 1e7); var i = _ / K0 / (R * M1), u = i + P2 * Math.sin(2 * i) + P3 * Math.sin(4 * i) + P4 * Math.sin(6 * i) + P5 * Math.sin(8 * i), a = Math.cos(u), w = Math.tan(u), s = Math.pow(w, 2), f = Math.pow(w, 4), d = 1 - E * Math.pow(Math.sin(u), 2), g = _E * a * a, p = g * g, b = (e - 5e5) / (R / Math.sqrt(d) * K0); return { latitude: toDegrees(u - w / ((1 - E) / d) * (Math.pow(b, 2) / 2 - Math.pow(b, 4) / 24 * (5 + 3 * s + 10 * g - 4 * p - 9 * E_P2)) + Math.pow(b, 6) / 720 * (61 + 90 * s + 298 * g + 45 * f - 252 * E_P2 - 3 * p)), longitude: toDegrees((b - Math.pow(b, 3) / 6 * (1 + 2 * s + g) + Math.pow(b, 5) / 120 * (5 - 2 * g + 28 * s - 3 * p + 8 * E_P2 + 24 * f)) / a) + zoneNumberToCentralLongitude(t) } } function fromLatLon(e, o, t) { if (e > 84 || e < -80) throw RangeError("latitude out of range (must be between 80 deg S and 84 deg N)"); if (o > 180 || o < -180) throw RangeError("longitude out of range (must be between 180 deg W and 180 deg E)"); var n, $ = toRadians(e), r = Math.sin($), _ = Math.cos($), i = Math.tan($), u = Math.pow(i, 2), a = Math.pow(i, 4); n = void 0 === t ? latLonToZoneNumber(e, o) : t; var w = latitudeToZoneLetter(e), s = toRadians(o), f = zoneNumberToCentralLongitude(n), d = toRadians(f), g = R / Math.sqrt(1 - E * r * r), p = E_P2 * _ * _, b = _ * (s - d), l = K0 * (R * (M1 * $ - M2 * Math.sin(2 * $) + M3 * Math.sin(4 * $) - M4 * Math.sin(6 * $)) + g * i * (Math.pow(b, 2) / 2 + Math.pow(b, 4) / 24 * (5 - u + 9 * p + 4 * p * p) + Math.pow(b, 6) / 720 * (61 - 58 * u + a + 600 * p - 330 * E_P2))); return e < 0 && (l += 1e7), { easting: K0 * g * (b + Math.pow(b, 3) / 6 * (1 - u + p) + Math.pow(b, 5) / 120 * (5 - 18 * u + a + 72 * p - 58 * E_P2)) + 5e5, northing: l, zoneNum: n, zoneLetter: w } } function latitudeToZoneLetter(e) { return -80 <= e && e <= 84 ? ZONE_LETTERS[Math.floor((e + 80) / 8)] : null } function latLonToZoneNumber(e, o) { if (56 <= e && e < 64 && 3 <= o && o < 12) return 32; if (72 <= e && e <= 84 && o >= 0) { if (o < 9) return 31; if (o < 21) return 33; if (o < 33) return 35; if (o < 42) return 37 } return Math.floor((o + 180) / 6) + 1 } function zoneNumberToCentralLongitude(e) { return (e - 1) * 6 - 180 + 3 } function toDegrees(e) { return e / Math.PI * 180 } function toRadians(e) { return e * Math.PI / 180 }